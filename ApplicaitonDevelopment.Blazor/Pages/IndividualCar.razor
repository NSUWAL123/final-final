@page "/cars/{id}"
@using ApplicationDevelopment.Blazor.Data
@using ApplicationDevelopment.Blazor.Data.DTO
@using ApplicationDevelopment.Blazor.Data.Services
@inject CarService CarService

@if (carDatas != null)
{
    <div class=" mt-3 mx-5 bg-white p-4" style="border-radius: 20px">
        <div class="d-flex " style="gap: 50px; ">
            <div class="w-50 d-flex justify-content-center">
                <img src="@carDatas.CarImage" class="w-75 rounded-3" style="border: 1px solid lightgray" />
            </div>

            <div class="d-flex flex-column gap-3">
                <h2 style="font-weight:500">@carDatas.Brand @carDatas.Model</h2>
                @if (carDatas.IsAvailable)
                {
                    <div>
                        <span class="fw-bold" style="color: #5D94E7">Available</span>
                    </div>

                }
                else
                {
                    <div>
                        <span class="fw-bold" style="color: #5D94E7">Not Available</span>
                    </div>
                }
                <div>
                    <span class="fw-bold">Model Year:</span>
                    <span>@carDatas.Year</span>
                </div>
                <div>
                    <span class="fw-bold">Type:</span>
                    <span>@carDatas.Type</span>
                </div>
                <div>
                    <span class="fw-bold">Color:</span>
                    <span>@carDatas.Color</span>
                </div>
                <div>
                    <span style="font-weight:600; color: #E25247">
                        <span class="fw-bolder" style="font-size: 18px"> Rs. @CalculateOfferedPrice(carDatas.RetailFee, carDatas.Discount)  /-</span> day
                    </span>
                </div>
                @if (carDatas.Discount > 0)
                {
                    <span>Rs. <strike>@carDatas.RetailFee </strike> -@carDatas.Discount%</span>
                }
            </div>
        </div>

        <div class="d-flex align-items-center mt-4 justify-content-center" style="gap: 80px">
            <div class="d-flex gap-2">
                <label class="fw-bold">From: </label>
                <input type="date" />
            </div>
            <div class="d-flex gap-2">
                <label class="fw-bold">To: </label>
                <input type="date" />
            </div>
            <button class="border-0 text-light rounded-3 py-1 px-3" style="background-color: #EE993D; font-weight:500">Send Request</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private CarData carDatas;
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("before calling");
        carDatas = await CarService.GetCarsByIdAsync(Id);
    }


    private int CalculateOfferedPrice(int retailPrice, double discount)
    {
        Console.WriteLine(retailPrice + "" + discount);
        var calculate = retailPrice - (int)(retailPrice * (discount / 100.0));
        Console.WriteLine(calculate);
        return calculate;
    }
}
